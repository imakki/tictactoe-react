{"version":3,"sources":["index.js"],"names":["Square","props","className","onClick","value","Board","i","this","squares","renderSquare","React","Component","Game","state","history","Array","fill","stepNumber","xIsNext","slice","length","calculateWinner","setState","concat","step","status","current","winner","moves","map","move","desc","key","jumpTo","handleClick","lines","a","b","c","ReactDOM","render","document","getElementById"],"mappings":"gNAIA,SAASA,EAAOC,GACZ,OACI,4BAAQC,UAAU,SAASC,QAASF,EAAME,SACzCF,EAAMG,O,IAKTC,E,qLAEWC,GAAI,IAAD,OACZ,OACA,kBAACN,EAAD,CACII,MAAOG,KAAKN,MAAMO,QAAQF,GAC1BH,QAAS,kBAAM,EAAKF,MAAME,QAAQG,Q,+BAMtC,OACI,6BACA,yBAAKJ,UAAY,aAAjB,IAAiCK,KAAKE,aAAa,GAAnD,IAA0DF,KAAKE,aAAa,GAA5E,IAAmFF,KAAKE,aAAa,GAArG,KACA,yBAAKP,UAAY,aAAjB,IAAiCK,KAAKE,aAAa,GAAnD,IAA0DF,KAAKE,aAAa,GAA5E,IAAmFF,KAAKE,aAAa,GAArG,KACA,yBAAKP,UAAY,aAAjB,IAAiCK,KAAKE,aAAa,GAAnD,IAA0DF,KAAKE,aAAa,GAA5E,IAAmFF,KAAKE,aAAa,GAArG,U,GAhBQC,IAAMC,WAsBpBC,E,YAEF,WAAYX,GAAQ,IAAD,8BACf,4CAAMA,KACDY,MAAQ,CACTC,QAAS,CAAC,CACNN,QAASO,MAAM,GAAGC,KAAK,QAE3BC,WAAY,EACZC,SAAS,GAPE,E,yEAWPZ,GACR,IAAMQ,EAAUP,KAAKM,MAAMC,QAAQK,MAAM,EAAEZ,KAAKM,MAAMI,WAAa,GAE7DT,EADUM,EAAQA,EAAQM,OAAS,GACjBZ,QAAQW,QAC7BE,EAAgBb,IAAYA,EAAQF,KAGvCE,EAAQF,GAAKC,KAAKM,MAAMK,QAAU,IAAM,IACxCX,KAAKe,SAAS,CACVR,QAASA,EAAQS,OAAO,CAAC,CACrBf,QAASA,KAEbS,WAAYH,EAAQM,OACpBF,SAAUX,KAAKM,MAAMK,a,6BAItBM,GACHjB,KAAKe,SAAS,CACVL,WAAYO,EACZN,QAAUM,EAAO,IAAO,M,+BAItB,IAmBFC,EAnBC,OAECX,EAAUP,KAAKM,MAAMC,QACrBY,EAAUZ,EAAQP,KAAKM,MAAMI,YAC7BU,EAASN,EAAgBK,EAAQlB,SAEjCoB,EAAQd,EAAQe,KAAI,SAACL,EAAMM,GAC7B,IAAMC,EAAOD,EACZ,eAAiBA,EACjB,mBACL,OACQ,wBAAIE,IAAKF,GACL,4BAAQ3B,QAAS,kBAAM,EAAK8B,OAAOH,KAC9BC,OAajB,OALIN,EADDE,EACU,WAAaA,EAEb,iBAAmBpB,KAAKM,MAAMK,QAAS,IAAM,KAItD,yBAAKhB,UAAY,QACb,yBAAKA,UAAY,cACb,kBAACG,EAAD,CACAG,QAASkB,EAAQlB,QACjBL,QAAS,SAACG,GAAD,OAAO,EAAK4B,YAAY5B,OAGrC,yBAAKJ,UAAY,aACb,iCAAQuB,EAAR,KACA,gCAAMG,GAFV,U,GAvEGlB,IAAMC,WA+EzB,SAASU,EAAgBb,GAWrB,IAVA,IAAM2B,EAAQ,CACZ,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAEA7B,EAAI,EAAGA,EAAI6B,EAAMf,OAAQd,IAAK,CAAC,IAAD,cACnB6B,EAAM7B,GADa,GAC9B8B,EAD8B,KAC3BC,EAD2B,KACxBC,EADwB,KAErC,GAAI9B,EAAQ4B,IAAM5B,EAAQ4B,KAAO5B,EAAQ6B,IAAM7B,EAAQ4B,KAAO5B,EAAQ8B,GACpE,OAAO9B,EAAQ4B,GAGnB,OAAO,KAKXG,IAASC,OAAQ,kBACb5B,EADa,MAEb6B,SAASC,eAAe,U","file":"static/js/main.4e01a5d9.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\nfunction Square(props) {\r\n    return(\r\n        <button className=\"square\" onClick={props.onClick}>\r\n        {props.value}\r\n        </button>\r\n    );\r\n}\r\n\r\nclass Board extends React.Component {\r\n\r\n    renderSquare(i) {\r\n        return ( \r\n        <Square \r\n            value={this.props.squares[i]} \r\n            onClick={() => this.props.onClick(i)} \r\n        /> \r\n        );\r\n    }\r\n\r\n    render() {\r\n        return ( \r\n            <div>\r\n            <div className = \"board-row\" > { this.renderSquare(0) } { this.renderSquare(1) } { this.renderSquare(2) } </div>  \r\n            <div className = \"board-row\" > { this.renderSquare(3) } { this.renderSquare(4) } { this.renderSquare(5) } </div>  \r\n            <div className = \"board-row\" > { this.renderSquare(6) } { this.renderSquare(7) } { this.renderSquare(8) } </div>  \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nclass Game extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            history: [{\r\n                squares: Array(9).fill(null),\r\n            }],\r\n            stepNumber: 0,\r\n            xIsNext: true,\r\n        };\r\n    }\r\n\r\n    handleClick(i) {\r\n        const history = this.state.history.slice(0,this.state.stepNumber + 1);\r\n        const current = history[history.length - 1];\r\n        const squares = current.squares.slice();\r\n        if(calculateWinner(squares) || squares[i]) {\r\n            return;\r\n        }\r\n        squares[i] = this.state.xIsNext ? 'X' : 'O';\r\n        this.setState({\r\n            history: history.concat([{\r\n                squares: squares,\r\n            }]),\r\n            stepNumber: history.length,\r\n            xIsNext: !this.state.xIsNext,\r\n        });\r\n    }\r\n\r\n    jumpTo(step) {\r\n        this.setState({\r\n            stepNumber: step,\r\n            xIsNext: (step % 2) === 0,    \r\n        });\r\n    }\r\n\r\n    render() {\r\n\r\n        const history = this.state.history;\r\n        const current = history[this.state.stepNumber];\r\n        const winner = calculateWinner(current.squares);\r\n\r\n        const moves = history.map((step, move) => {\r\n            const desc = move ?\r\n             'Go to move #' + move :\r\n             'Go to game start';\r\n        return (\r\n                <li key={move}>\r\n                    <button onClick={() => this.jumpTo(move)}>\r\n                        {desc}\r\n                    </button>\r\n                </li>\r\n            );\r\n        });\r\n\r\n        let status;\r\n        if(winner) {\r\n            status = 'Winner: ' + winner;\r\n        } else {\r\n            status = 'Next player: ' + (this.state.xIsNext? 'X' : 'O');\r\n        }\r\n\r\n        return ( \r\n            <div className = \"game\">\r\n                <div className = \"game-board\">\r\n                    <Board\r\n                    squares={current.squares}\r\n                    onClick={(i) => this.handleClick(i)}\r\n                    />\r\n                </div> \r\n                <div className = \"game-info\">\r\n                    <div > {status} </div> \r\n                    <ol> {moves}</ol> </div> \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction calculateWinner(squares) {\r\n    const lines = [\r\n      [0, 1, 2],\r\n      [3, 4, 5],\r\n      [6, 7, 8],\r\n      [0, 3, 6],\r\n      [1, 4, 7],\r\n      [2, 5, 8],\r\n      [0, 4, 8],\r\n      [2, 4, 6],\r\n    ];\r\n    for (let i = 0; i < lines.length; i++) {\r\n      const [a, b, c] = lines[i];\r\n      if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n        return squares[a];\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n// ========================================\r\n\r\nReactDOM.render( <\r\n    Game / > ,\r\n    document.getElementById('root')\r\n);"],"sourceRoot":""}